name: Android CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3.2.0

      - name: Setup JDK 17
        uses: actions/setup-java@v3.9.0
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3.2.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-core-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: gradle-deps

      - name: Cache Gradle Build
        uses: actions/cache@v3.2.2
        with:
          path: |
            ~/.gradle/caches/build-cache-*
            ~/.gradle/buildOutputCleanup/cache.properties
          key: gradle-builds-core-${{ github.sha }}
          restore-keys: gradle-builds

      - name: Build with Gradle
        run: |
          echo ${{ secrets.SIGNING_KEY }} | base64 -d > keystore.jks
          bash ./gradlew assemble
        env:
          KEYSTORE_PATH: "../keystore.jks"
          KEYSTORE_PASS: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: MiuiHomeR_Release
          path: "app/build/outputs/apk/release/*.apk"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v3
        with:
          name: MiuiHomeR_Debug
          path: "app/build/outputs/apk/debug/*.apk"

      - name: Find apk
        run: |
          echo "RELEASE=$(find 'app/build/outputs/apk/release' -name '*.apk')" >> $GITHUB_ENV
          echo "DEBUG=$(find 'app/build/outputs/apk/debug' -name '*.apk')" >> $GITHUB_ENV
      - name: Post to channel
        if: contains(github.event.head_commit.message, '[skip post]') == false
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          RELEASE: ${{ env.RELEASE }}
          DEBUG: ${{ env.DEBUG }}
          COMMIT_MESSAGE: |+
            New push in Github\!
            ```
            ${{ github.event.head_commit.message }}
            ```
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Frelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fdebug%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22%3A${ESCAPED}%7D%5D" -F release="@$RELEASE" -F debug="@$DEBUG"
